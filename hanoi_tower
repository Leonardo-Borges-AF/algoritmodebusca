from copy import deepcopy
import sys
sys.setrecursionlimit(100000)

class Node:
  def __init__(self):
    self.state=[[],[],[]]
    self.nodeNumber=0
    self.status='idle'
    self.neighbours=[]
    self.parent=None
    self.children=[]#For BFS
    self.point=10



def evalFunc(node):
    largest=0
    l=[]
    for peg in initialState:
        if len(peg)>0:
            l.append(max(peg))

    largest=max(l)
    node.point=10
    setPnts(node,largest)

def setPnts(node,largest):
    global finalState
    if largest>0:

        for fpeg in finalState:
            if largest in fpeg:

                pos=finalState.index(fpeg)
                if largest in node.state[pos]:
                    node.point=node.point-1
                    setPnts(node,largest-1)



def move(st1,st2):

    s1=st1[:]
    s2=st2[:]

    if len(s1)>0:
        topDisc=s1[len(s1)-1]
        lastofS2=len(s2)-1

        if len(s2)==0 or s2[lastofS2]>topDisc:
            s2.append(topDisc)
            s1.pop()

            return s1,s2
        else:
            return None
    else:
        return None


def moveDisc(n):
    global noOfPegs
    stacks=[]

    for x in range(0,noOfPegs):
        for y in range(0,noOfPegs):

            stacks=move(n.state[x],n.state[y])


            if stacks!=None:
                nextnode=Node()
                nextnode=deepcopy(n)
                nextnode.state[x]=deepcopy(stacks[0])
                nextnode.state[y]=deepcopy(stacks[1])
                if nextnode.state  in states:
                    a=1#dumb value
                else:
                    nodenumber=nextnode.nodeNumber
                    states.append(nextnode.state)
                    return nextnode
    return None

def printPath(node):
    while True:
        print('Node number: ', node.nodeNumber,'  State:  ', node.state)
        if node.parent!=None:
            node=node.parent
        else:
            break



def dfs(node):
    global targetFound
    global nodenumber
    if targetFound==False:
        node.status='ongoing'
        parent=deepcopy(node)
        node=moveDisc(node)

        if node!=None:
            nodenumber+=1
            node.nodeNumber=nodenumber
            node.parent=parent
            print('Node ',node.nodeNumber, node.state,'\n')
            if node.state==finalState:
                printPath(node)
                targetFound=True

            dfs(node)
        else:
            parent.status='done'
            node=parent.parent
            print('moving back to Node',node.nodeNumber,'State',node.state)
            dfs(node)
    else:
        return False





def BFS(node):
    global parentList,nodenumber,childList,targetFound,step

    print('\n STEP : ',step)
    step+=1
    for node in parentList:
        if targetFound==False :
            # print('Parent Node:',node.nodeNumber,' State :',node.state)
            exhausted=False
            parent=deepcopy(node)

            i=1
            while exhausted==False :

                i+=1
                childnode=moveDisc(node)

                if childnode!=None:
                    nodenumber+=1
                    childnode.nodeNumber=nodenumber
                    childnode.parent=node
                    parent.children.append(childnode)
                    childList.append(childnode)
                    if childnode.state==finalState:
                        print('Estados finais')
                        printPath(childnode)
                        targetFound=True


                else:
                    exhausted=True
    parentList=deepcopy(childList)
    childList=[]
    if targetFound==False :
        BFS(parentList)





def bestFS():
    print('\n')
    global parentList,nodenumber,childList,targetFound,step,largestInTarget,largest
    leastPoint=10
    for node in parentList:
        evalFunc(node)

        if node.point<leastPoint:
            leastPoint=node.point



    for node in parentList:
        if targetFound==False and node.point==leastPoint:
            # print('Parent Node:',node.nodeNumber,' State :',node.state, 'Cost = ', node.point)
            exhausted=False
            parent=deepcopy(node)

            i=1
            while exhausted==False :

                i+=1
                childnode=moveDisc(node)

                if childnode!=None:
                    nodenumber+=1
                    childnode.nodeNumber=nodenumber
                    childnode.parent=node
                    parent.children.append(childnode)
                    childList.append(childnode)
                    if childnode.state==finalState:
                        print('Final target reached')
                        printPath(childnode)
                        targetFound=True


                else:
                    exhausted=True
    parentList=deepcopy(childList)
    childList=[]
    if targetFound==False :
        bestFS()



def readState():
    global noOfPegs
    state=[]
    for x in range(0,noOfPegs):
        print('Discos no pino',x+1,' : ',)
        a = [int(x) for x in input().split()]
        state.append(a)

    return state

noOfPegs=3
shouldContinue=True
while shouldContinue:
    print('\n1. Depth First Search')
    print('2. Breadth First Search')
    print('3. Best First Search')
    print('4. Exit')


    algoNumber = input("Selecione o algoritmo --> ")


    if algoNumber=='4':
        print('\nExiting')
        quit()

    print('\nInstruções para a entrada:')
    print('--> Um exemplo de entrada para o pino 1 >>> 3 2 1')
    print('--> O pino um tem 3 discos com tamanho 3 isso significa que a base é o 3 e o topo é o 1')
    print('--> Se o pino for vazio, apenas clique no ENTER; Faça isso para todos os casos')
    noOfPegs =int(input("\nColoque o número de pinos--> "))

    print('\nInsira detalhes para o estado inicial')
    initialState=readState()
    print('\nInsira detalhes para o estado final')
    finalState=readState()

    print('\nEstado inicial : ',initialState)
    print('Estado final : ',finalState)

    # initialState=[[1],[3],[2]]
    # finalState=[[3,1],[2],[]]

    # initialState=[[3],[1],[2]]
    # finalState=[[3,2,1],[],[]]
    states=[]
    states=[initialState]
    nodenumber=1
    time=1
    targetFound=False

    node=Node()
    node.state=initialState
    node.nodeNumber=nodenumber
    parentList=[node]
    childList=[]
    targetFound=False
    largestInTarget=False

    step=1


    parentList=[node]
    childList=[]





    if algoNumber=='1':
        print('\nVocê selecionou Depth First Search')
        print('Node ',node.nodeNumber, node.state,'\n')#only for DFS)
        dfs(node)

    elif algoNumber=='2':
        print('\nVocê selecionou Breadth First Search')
        BFS(node)

    elif algoNumber=='3':
        print('\nVocê selecionou Best First Search')
        bestFS()

    elif algoNumber=='4':
        print('\nExit')
        quit()

    else:
        print('Porfavor, selecione uma opção valida')
        continue
